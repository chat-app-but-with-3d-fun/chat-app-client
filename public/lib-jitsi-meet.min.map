{"version":3,"file":"lib-jitsi-meet.min.js","mappings":"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","sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./node_modules/async/lib/async.js","webpack://JitsiMeetJS/./node_modules/base64-js/index.js","webpack://JitsiMeetJS/./node_modules/bowser/es5.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./node_modules/lodash.clonedeep/index.js","webpack://JitsiMeetJS/./node_modules/lodash.debounce/index.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/bytesToUuid.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/index.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/md5-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/rng-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/sha1-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v1.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v3.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v35.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v4.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v5.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/./service/RTC/BridgeVideoType.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.js","webpack://JitsiMeetJS/./service/RTC/MediaDirection.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/e2ee/KeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://JitsiMeetJS/./node_modules/uuid/wrapper.mjs","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/ManagedKeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/xmpp/AVModeration.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/flags/FeatureFlags.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/sdp/SDPUtil.js","webpack://JitsiMeetJS/./modules/sdp/SDP.js","webpack://JitsiMeetJS/./modules/sdp/SDPDiffer.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/RTC/CodecSelection.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./modules/sdp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/sdp/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/sdp/RtxModifier.js","webpack://JitsiMeetJS/./modules/sdp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/qualitycontrol/ReceiveVideoController.js","webpack://JitsiMeetJS/./modules/qualitycontrol/SendVideoController.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/webpack/runtime/amd options","webpack://JitsiMeetJS/webpack/runtime/compat get default export","webpack://JitsiMeetJS/webpack/runtime/define property getters","webpack://JitsiMeetJS/webpack/runtime/global","webpack://JitsiMeetJS/webpack/runtime/hasOwnProperty shorthand","webpack://JitsiMeetJS/webpack/runtime/make namespace object","webpack://JitsiMeetJS/webpack/runtime/node module decorator","webpack://JitsiMeetJS/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(self, function() {\nreturn ","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./JitsiMeetJS').default;\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/* global config */\n\nconst Word = require('../word');\n\nconst audioRecorder = require('./../audioRecorder');\nconst TranscriptionService = require('./AbstractTranscriptionService');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1],\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","/* global module */\n/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/* global module */\n/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","/* global module */\n/**\n * Enumeration of the media direction types.\n * @type {{INACTIVE: string, RECVONLY: string, SENDONLY: string, SENDRECV: string}}\n */\nconst MediaDirection = {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY: 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY: 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV: 'sendrecv'\n};\n\nmodule.exports = MediaDirection;\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED: 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channnel.\n     */\n    ENDPOINT_STATS_RECEIVED: 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS: 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED: 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS: 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED: 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED: 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED: 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED: 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED: 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED: 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED: 'xmpp.av_moderation.participant.rejected',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that the client has been forced to restart by jicofo when the\n * conference was migrated from one bridge to another.\n */\nexport const CONFERENCE_RESTARTED = 'conference.restarted';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference, only approved members are allowed to join.\n */\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\n\n/**\n * Indicates that a connection error is due to denied access to the room,\n * occurred after joining a lobby room and access is denied by the room moderators.\n */\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the media connection has failed.\n */\nexport const ICE_FAILED = 'conference.iceFailed';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference is in progress of joining.\n */\nexport const CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the conference unique identifier has been set.\n */\nexport const CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n */\nexport const ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * An event(library-private) fired when a new media session is added to the conference.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\n\n/**\n * An event(library-private) fired when the conference switches the currently active media session.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\n\n/**\n * Indicates that the conference had changed to members only enabled/disabled.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running in members only mode.\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\n */\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * Indicates that a message from the local user or from the Prosody backend\n * was received on the data channel.\n */\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n\n/**\n * A new user joined the lobby room.\n */\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\n\n/**\n * A user from the lobby room has been update.\n */\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\n\n/**\n * A user left the lobby room.\n */\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\n\n/**\n * The local participant was approved to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_APPROVED = 'conference.av_moderation.approved';\n\n/**\n * The local participant was blocked to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_REJECTED = 'conference.av_moderation.rejected';\n\n/**\n * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n * or undefined if that participant has left the meeting.\n *\n * @param {options} event - {\n *     {boolean} enabled,\n *     {MediaType} mediaType,\n *     {JitsiParticipant} actor\n * }.\n */\nexport const AV_MODERATION_CHANGED = 'conference.av_moderation.changed';\n\n/**\n * AV Moderation, report for user being approved to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved';\n\n/**\n * AV Moderation, report for user being blocked to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected';\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * Generic error for screensharing failure.\n */\nexport const SCREENSHARING_GENERIC_ERROR\n    = 'gum.screensharing_generic_error';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog.\n */\nexport const SCREENSHARING_USER_CANCELED\n    = 'gum.screensharing_user_canceled';\n\n\n/**\n * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n */\nexport const TIMEOUT = 'gum.timeout';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function(mediaType) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted',\n        mediaType\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n\n/**\n * An event carrying performance stats.\n */\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers.js';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    } else if (typeof window.JitsiMeetElectron !== 'undefined') {\n        return {\n            name: ELECTRON,\n            version: undefined\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        return JSON.stringify(this._storage);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        if (this.isLocalStorageDisabled()) {\n            return this._storage.serialize();\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            localStorageContent[key] = this._storage.getItem(key);\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers except React Native do.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {String} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec && videoCodec) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getLocalSSRC(localVideoTracks[0]);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n\n/**\n * Indicates that the local audio track is not receiving any audio input from\n * the microphone that is currently selected.\n */\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n         * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n         * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds.\n         */\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as MediaType from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n}\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n\n/**\n * Indicates that the display name is required over this connection and need to be supplied when\n * joining the room.\n * There are cases like lobby room where display name is required.\n */\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global __filename, RTCRtpScriptTransform */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n        // synchronously load the JS.\n        const workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n        const workerBlob\n            = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n        const blobUrl = window.URL.createObjectURL(workerBlob);\n\n        this._worker = new Worker(blobUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling && await this._enabling;\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference._getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference._getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","/* global __filename, Olm */\n\nimport base64js from 'base64-js';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeyReady(this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this._conf.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {ArrayBuffer} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {CryptoKey} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $msg } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage.bind(this));\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (approved) {\n            const event = removed ? XMPPEvents.AV_MODERATION_REJECTED : XMPPEvents.AV_MODERATION_APPROVED;\n\n            this._xmpp.eventEmitter.emit(event, media);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Leaves the lobby room.\n     * @private\n     */\n    _leaveLobbyRoom() {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed let's join and leave lobby\n                        this.mainRoom.join(invitePassword);\n\n                        this._leaveLobbyRoom();\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this._leaveLobbyRoom();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: this.mainRoom.roomjid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/* global $, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                    logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            nick: Strophe.getResourceFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': m.jid\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    setVideoMute(mute) {\n        this.sendVideoInfoPresence(mute);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    setAudioMute(mute) {\n        this.sendAudioInfoPresence(mute);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendAudioInfoPresence(mute) {\n        // FIXME resend presence on CONNECTED\n        this.addAudioInfoToPresence(mute) && this.sendPresence();\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute) && this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            this.clean();\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger('FeatureFlags');\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\n     */\n    init(flags) {\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\n\n        logger.info(`Source name signaling: ${this._sourceNameSignaling}`);\n    }\n\n    /**\n     * Checks if the source name signaling is enabled.\n     *\n     * @returns {boolean}\n     */\n    isSourceNameSignalingEnabled() {\n        return this._sourceNameSignaling;\n    }\n}\n\nexport default new FeatureFlags();\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const video = typeof desktopSharingFrameRate === 'object' ? { frameRate: desktopSharingFrameRate } : true;\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/* global $ */\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        media.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        sdp += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            sdp += ` ${streamCount}\\r\\n`;\n        } else {\n            sdp += '\\r\\n';\n        }\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sdp += `a=ssrc:${ssrc} ${name}`;\n                    if (value && value.length) {\n                        sdp += `:${value}`;\n                    }\n                    sdp += '\\r\\n';\n                });\n        });\n\n    return sdp;\n};\n","import FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","/* global __filename */\n\nimport async from 'async';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.room = room;\n        this.rtc = rtc;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","export default {\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","\nimport Listenable from '../../modules/util/Listenable';\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n        }\n        if (room) {\n            // SignalingEvents\n            this._audioMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.AUDIO, node.value === 'true');\n            };\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n            this._videoMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.VIDEO, node.value === 'true');\n            };\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n            this._videoTypeHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                    from, node.value);\n            };\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        if (this.chatRoom) {\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n        }\n        logger.error('Requested peer media info, before room was set');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n}\n","/* global __filename, $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport SignalingLayerImpl from './SignalingLayerImpl';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * The signaling layer implementation.\n         * @type {SignalingLayerImpl}\n         */\n        this.signalingLayer = new SignalingLayerImpl();\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this.signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => this.peerconnection.configureSenderVideoEncodings())\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n\n        // The signaling layer will bind it's listeners at this point\n        this.signalingLayer.setChatRoom(this.room);\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this.signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this.signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const localTrack of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info(`${this} setAnswer - succeeded`);\n                if (this.usesUnifiedPlan && browser.isChromiumBased()) {\n                    // This hack is needed for Chrome to create a decoder for the ssrcs in the remote SDP when\n                    // the local endpoint is the offerer and starts muted.\n                    const remoteSdp = this.peerconnection.remoteDescription.sdp;\n                    const remoteDescription = new RTCSessionDescription({\n                        type: 'offer',\n                        sdp: remoteSdp\n                    });\n\n                    this._responderRenegotiate(remoteDescription);\n                }\n            },\n            error => {\n                logger.error(`${this} setAnswer failed: `, error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            Promise.all(addTracks)\n                .then(() => this._renegotiate(newRemoteSdp.raw))\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        //\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n        }\n\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\n\n        this.localRecvMaxFrameHeight = maxFrameHeight;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        } else {\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\n\n            // RN doesn't support RTCRtpSenders yet, aggresive layer suspension on RN is implemented\n            // by changing the media direction in the SDP. This is applicable to jvb sessions only.\n            if (!this.isP2P && browser.isReactNative() && typeof maxFrameHeight !== 'undefined') {\n                const videoActive = maxFrameHeight > 0;\n\n                return this.setMediaTransferActive(true, videoActive);\n            }\n\n            const promise = maxFrameHeight\n                ? this.peerconnection.setSenderVideoConstraints(maxFrameHeight)\n                : this.peerconnection.configureSenderVideoEncodings();\n\n            return promise;\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of the remote tracks and SSRCs associated with a remote endpoint.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {Promise<JitsiRemoteTrack>} Promise that resolves with the tracks that are removed or error if the\n     * operation fails.\n     */\n    removeRemoteStreamsOnLeave(id) {\n        let remoteTracks = [];\n\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                remoteTracks = this.peerconnection.removeRemoteTracks(id);\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                        resolve(remoteTracks);\n                    }\n                });\n        });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            // Add a workaround for a bug in Chrome (unified plan) for p2p connection. When the media direction on\n            // the transceiver goes from \"inactive\" (both users join muted) to \"recvonly\" (peer unmutes), the browser\n            // doesn't seem to create a decoder if the signaling state changes from \"have-local-offer\" to \"stable\".\n            // Therefore, initiate a responder renegotiate even if the endpoint is the offerer to workaround this issue.\n            // TODO - open a chrome bug and update the comments.\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n            const promise = isAdd && this.usesUnifiedPlan && this.isP2P && browser.isChromiumBased()\n                ? this._responderRenegotiate(remoteDescription)\n                : this._renegotiate(newRemoteSdp.raw);\n\n            promise.then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        // Remove the ssrcs from the m-line in\n                        // 1. Plan-b mode always.\n                        // 2. Unified mode but only for jvb connection. In p2p mode if the ssrc is removed and added\n                        // back to the same m-line, Chrome/Safari do not render the media even if it being received\n                        // and decoded from the remote peer. The webrtc spec is not clear about m-line re-use and\n                        // the browser vendors have implemented this differently. Currently workaround this by changing\n                        // the media direction, that should be enough for the browser to fire the \"removetrack\" event\n                        // on the associated MediaStream.\n                        if (!this.usesUnifiedPlan || (this.usesUnifiedPlan && !this.isP2P)) {\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                        }\n\n                        // The current direction of the transceiver for p2p will depend on whether a local sources is\n                        // added or not. It will be 'sendrecv' if the local source is present, 'sendonly' otherwise.\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n\n                        // Jvb connections will have direction set to 'sendonly' when the remote ssrc is present.\n                        } else {\n                            // Change the direction to \"inactive\" always for jvb connection.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx]\n                        = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        if (newTrack?.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // Configure the video encodings after the track is replaced.\n                            return this.peerconnection.configureSenderVideoEncodings();\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings();\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not\n                                // enough to fail the whole operation. It will log\n                                // an error inside.\n                                this._verifyNoSSRCChanged(\n                                    operationName, new SDP(oldLocalSDP));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info(`${this} Sending source-remove`);\n            logger.debug(remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info(`${this} Sending source-add`);\n            logger.debug(add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // The signaling layer will remove it's listeners\n            this.signalingLayer.setChatRoom(null);\n\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/* global $, $build, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceCompactJson.n : undefined\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nfunction _expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                }\n\n                // Log only the first video ssrc per endpoint.\n                ssrcs.push(videoSources[0]?.s);\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                }\n                ssrcs.push(audioSources[0]?.s);\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = _expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            const height = $(iq).find('jingle>content[name=\"video\"]>max-frame-height');\n\n            logger.debug(`Received ${action} from ${fromJid} with a max-frame-height=${height?.text()}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            v2Err => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1', v2Err);\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    v1Err => {\n                        logger.warn('getting turn credentials failed', v1Err);\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo?.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on('beforeunload unload', ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        // Disable RTX on Firefox 83 and older versions because of\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1668028\n        if (!(this.options.disableRtx || (browser.isFirefox() && browser.isVersionLessThan(94)))) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n        });\n\n        if (this.avModerationComponentAddress\n            || this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, options.customDomain)}/`;\n\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress\n            || from === this.avModerationComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        }\n\n        return true;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        if (this.jvbPreferredCodec === CodecMimeType.VP9 && !browser.supportsVP9()) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStared(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStared(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = currentCodec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session.signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n                const peerCodec = peerMediaInfo?.codecType;\n\n                if (peerCodec\n                    && peerCodec !== currentCodec\n                    && (peerCodec !== CodecMimeType.VP9 || browser.supportsVP9())) {\n                    selectedCodec = peerCodec;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending video).\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport clonedeep from 'lodash.clonedeep';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport VideoType from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (browser.isReactNative()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream = undefined; // Unused on React Native.\n\n            this.getStreamID = function({ id }) {\n                // The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n        } else {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        }\n\n        this.pcConstraints = browser.isChromiumBased() || browser.isReactNative()\n            ? { optional: [\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true }\n            ] }\n            : {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(error);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia() {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia();\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        // Calling getUserMedia again (for preview) kills the track returned by the first getUserMedia call because of\n        // https://bugs.webkit.org/show_bug.cgi?id=179363. Therefore, do not show microphone/camera options on mobile\n        // Safari.\n        if ((deviceType === 'audioinput' || deviceType === 'input') && browser.isIosBrowser()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.effects the effects array contains the effect instance to use\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @private\n     * @param {*} effect - Represents effect instance\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference && this.conference.room) {\n            this.conference.room[\n                this.isAudioTrack()\n                    ? 'setAudioMute'\n                    : 'setVideoMute'](mute);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        if (this.conference) {\n            promise = promise.then(() => this.conference.removeTrack(this));\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = (media[type].sources || []).concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.warn(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        ssrcLine.value\n                            = this._generateMsidAttribute(\n                                mediaSection.mLine?.type,\n                                streamAndTrackIDs[1],\n                                streamAndTrackIDs[0]);\n                    } else {\n                        logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        // If the msid attribute is missing, then remove the ssrc from the transformed description so that a\n        // source-remove is signaled to Jicofo. This happens when the direction of the transceiver (or m-line)\n        // is set to 'inactive' or 'recvonly' on Firefox, Chrome (unified) and Safari.\n        const mediaDirection = mediaSection.mLine?.direction;\n\n        if (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n\n        // Add the msid attribute if it is missing when the direction is sendrecv/sendonly. Firefox doesn't produce a\n        // a=ssrc line with msid attribute for p2p connection.\n        } else {\n            const msidLine = mediaSection.mLine?.msid;\n            const trackId = msidLine && msidLine.split(' ')[1];\n            const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n            for (const source of sources) {\n                const msidExists = mediaSection.ssrcs\n                    .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n                if (!msidExists) {\n                    const generatedMsid = this._generateMsidAttribute(mediaSection.mLine?.type, trackId);\n\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'msid',\n                        value: generatedMsid\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return;\n        }\n\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n\n            if (!nameExists) {\n                const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: `${this.localEndpointId}-${firstLetterOfMediaType}0`\n                });\n            }\n        }\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        const encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.high : encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.low : encodingBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    _findTransceiver(mediaType, localTrack = null) {\n        let transceiver = null;\n\n        // Check if the local track has been removed from the peerconnection already.\n        const trackRemoved = !localTrack\n            || (localTrack\n                && browser.doesVideoMuteByStreamRemove()\n                && localTrack.isVideoTrack()\n                && localTrack.isMuted());\n\n        if (trackRemoved) {\n            transceiver = this.pc.peerconnection.getTransceivers()\n                .find(t => t.receiver?.track?.kind === mediaType);\n        } else if (localTrack) {\n            transceiver = this.pc.peerconnection.getTransceivers()\n                .find(t => t.sender?.track?.id === localTrack.getTrackId());\n        }\n\n        return transceiver;\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc)),\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams: [ localTrack.getOriginalStream() ],\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    addTrackUnmute(localTrack) {\n        const mediaType = localTrack.getType();\n        const track = localTrack.getTrack();\n        const transceiver = this._findTransceiver(mediaType);\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n        logger.debug(`${this.pc} Adding ${localTrack}`);\n\n        return transceiver.sender.replaceTrack(track);\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const encodingsState = this.localStreamEncodingsConfig\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && this.localStreamEncodingsConfig[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (this.pc.isSharingLowFpsScreen()\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && this.localStreamEncodingsConfig[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const presenterEnabled = localVideoTrack._originalStream\n            && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n\n        const encodingsBitrates = this.localStreamEncodingsConfig\n        .map(encoding => {\n            const bitrate = this.pc.isSharingLowFpsScreen() && !browser.isWebKitBased()\n\n                // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on, 2500 Kbps\n                // otherwise.\n                ? presenterEnabled ? HD_BITRATE : desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Removes the track from the RTCRtpSender as part of the mute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    removeTrackMute(localTrack) {\n        const mediaType = localTrack.getType();\n        const transceiver = this._findTransceiver(mediaType, localTrack);\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n\n        logger.debug(`${this.pc} Removing ${localTrack}`);\n\n        return transceiver.sender.replaceTrack(null);\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        if (oldTrack && newTrack) {\n            const mediaType = newTrack.getType();\n            const stream = newTrack.getOriginalStream();\n\n            // Ignore cases when the track is replaced while the device is in a muted state,like\n            // replacing camera when video muted or replacing mic when audio muted. These JitsiLocalTracks\n            // do not have a mediastream attached. Replace track will be called again when the device is\n            // unmuted and the track will be replaced on the peerconnection then.\n            if (!stream) {\n                this.pc.localTracks.delete(oldTrack.rtcId);\n                this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                return Promise.resolve();\n            }\n\n            const transceiver = this._findTransceiver(mediaType, oldTrack);\n            const track = newTrack.getTrack();\n\n            if (!transceiver) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n            return transceiver.sender.replaceTrack(track)\n                .then(() => {\n                    const ssrc = this.pc.localSSRCs.get(oldTrack.rtcId);\n\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                    this.pc._addedStreams = this.pc._addedStreams.filter(s => s !== stream);\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                    this.pc._addedStreams.push(stream);\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\n                });\n        } else if (oldTrack && !newTrack) {\n            return this.removeTrackMute(oldTrack)\n                .then(() => {\n                    const mediaType = oldTrack.getType();\n                    const transceiver = this._findTransceiver(mediaType);\n\n                    // Change the direction on the transceiver to 'recvonly' so that a 'removetrack'\n                    // is fired on the associated media stream on the remote peer.\n                    if (transceiver) {\n                        transceiver.direction = MediaDirection.RECVONLY;\n                    }\n\n                    // Remove the old track from the list of local tracks.\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                });\n        } else if (newTrack && !oldTrack) {\n            return this.addTrackUnmute(newTrack)\n                .then(() => {\n                    const mediaType = newTrack.getType();\n                    const transceiver = this._findTransceiver(mediaType, newTrack);\n\n                    // Change the direction on the transceiver back to 'sendrecv' so that a 'track'\n                    // event is fired on the remote peer.\n                    if (transceiver) {\n                        transceiver.direction = MediaDirection.SENDRECV;\n                    }\n\n                    // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                    // for the newly added track using SDP munging which happens during the renegotiation.\n                    const promise = browser.usesSdpMungingForSimulcast()\n                        ? Promise.resolve()\n                        : this.setEncodings(newTrack);\n\n                    return promise\n                        .then(() => {\n                            // Add the new track to the list of local tracks.\n                            this.pc.localTracks.set(newTrack.rtcId, newTrack);\n                        });\n                });\n        }\n\n        logger.info(`${this.pc} TPCUtils.replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this._findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\n                if (idx === 0 && localTracks.length) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","/* global __filename, RTCSessionDescription */\n\nimport { Interop } from '@jitsi/sdp-interop';\nimport { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCUtils.RTCPeerConnectionType(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast(\n        {\n            numOfLayers: SIM_LAYER_RIDS.length,\n            explodeRemoteSimulcast: false,\n            usesUnifiedPlan: this._usesUnifiedPlan\n        });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video track.\n *\n * @returns {JitsiLocalTrack|undefined} - local video track.\n */\nTraceablePeerConnection.prototype.getLocalVideoTrack = function() {\n    return this.getLocalTracks(MediaType.VIDEO)[0];\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},type=${mediaType}]`);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n\n        // The exisiting track needs to be removed here. We can get here when Jicofo reverses the order of source-add\n        // and source-remove messages. Ideally, when a remote endpoint changes source, like switching devices, it sends\n        // a source-remove (for old ssrc) followed by a source-add (for new ssrc) and Jicofo then should forward these\n        // two messages to all the other endpoints in the conference in the same order. However, sometimes, these\n        // messages arrive at the client in the reverse order resulting in two remote tracks (of same media type) being\n        // created and in case of video, a black strip (that of the first track which has ended) appears over the live\n        // track obscuring it. Removing the existing track when that happens will fix this issue.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(`${this} Removed track not found for stream[id=${streamId},trackId=${trackId}]`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unfied-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            const mLine = session.media.find(m => m.type === mediaType);\n\n            mLine && media.push(mLine);\n        });\n    }\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? mLine.type : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the\n * peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const track = this.getLocalVideoTrack();\n\n    return track && track.videoType === VideoType.DESKTOP;\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Only the m-line that defines the source the browser will be sending should need to change.\n    // This is typically the first m-line with the matching media type.\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLine) {\n        return description;\n    }\n\n    if (this.codecPreference.enable) {\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\n        // High profile codecs give better quality at the expense of higher load which\n        // we do not want on mobile clients.\n        // Jicofo offers only the baseline code for the jvb connection.\n        // TODO - add check for mobile browsers once js-utils provides that check.\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n        }\n\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\n        // as soon as the browser switches to VP9.\n        if (this.codecPreference.mimeType === CodecMimeType.VP9\n            && this.getConfiguredVideoCodec() === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    } else {\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Checks if given track belongs to this peerconnection instance.\n *\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.containsTrack = function(track) {\n    if (track.isLocal()) {\n        return this.localTracks.has(track.rtcId);\n    }\n\n    const participantId = track.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n\n    if (this._usesUnifiedPlan) {\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        const webrtcStream = track.getOriginalStream();\n\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\n * operation\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    logger.info(`${this} Adding track=${track} as unmute`);\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} as unmute - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.addTrackUnmute(track);\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n\n        // Renegotiate only in the case of P2P. We rely on 'negotiationeeded' to be fired for JVB.\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack).then(() => this.isP2P);\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.removeTrackMute(localTrack);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} as mute`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeStreamMute - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType);\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource\n                ? MediaDirection.RECVONLY\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function() {\n    return this.setSenderVideoConstraints(this._senderVideoMaxHeight);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localSdp = this._mungeOpus(localSdp);\n\n    if (!this._usesUnifiedPlan) {\n        localSdp = this._adjustLocalMediaDirection(localSdp);\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n    } else if (!this.isP2P) {\n\n        // if we're using unified plan, transform to it first.\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js if we are using SDP munging.\n    if (!this._usesTransceiverCodecPreferences) {\n        localSdp = this._mungeCodecOrder(localSdp);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    /* eslint-disable no-param-reassign */\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    description = this._mungeOpus(description);\n\n    /* eslint-enable no-param-reassign */\n\n    if (!this._usesUnifiedPlan) {\n        // TODO the focus should squeze or explode the remote simulcast\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description, true /* add x-google-conference flag */);\n            this.trace(\n                'setRemoteDescription::postTransform (simulcast)',\n                dumpSDP(description));\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    } else if (!this.isP2P) {\n        const currentDescription = this.peerconnection.remoteDescription;\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description, currentDescription);\n        this.trace(\n            'setRemoteDescription::postTransform (Unified)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description);\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils.insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n        }\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    // eslint-disable-next-line no-param-reassign\n    description = this._mungeCodecOrder(description);\n\n    if (this._usesUnifiedPlan) {\n        // eslint-disable-next-line no-param-reassign\n        description = this.tpcUtils.ensureCorrectOrderOfSsrcs(description);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    this._senderVideoMaxHeight = frameHeight;\n    const localVideoTrack = this.getLocalVideoTrack();\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    // Set the degradation preference.\n    const preference = this.isSharingLowFpsScreen()\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                // Max bitrates are configured on the encodings only for VP8.\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || this.isSharingLowFpsScreen()\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        const scaleFactor = videoType === VideoType.DESKTOP || localVideoTrack.resolution <= frameHeight\n            ? HD_SCALE_FACTOR\n            : Math.floor(localVideoTrack.resolution / frameHeight);\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils.localStreamEncodingsConfig\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTrack();\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan\n                || !this.isSharingLowFpsScreen())) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceIdentifier = this._usesUnifiedPlan ? track.getType() : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // The default video type assumed by the bridge.\n        this._videoType = BridgeVideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            try {\n                this._channel.sendVideoTypeMessage(this._videoType);\n            } catch (error) {\n                logError(error, 'VideoTypeMessage', this._videoType);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n            this._channelOpenListener = null;\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst VideoType = require('../../service/RTC/VideoType');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { EventEmitter } from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nexport class ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference._getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference._getMediaSessions().find(session => session.isP2P);\n\n            if (p2pSession) {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this.conference = conference;\n        this.layerSuspensionEnabled = conference.options?.config?.enableLayerSuspension ?? true;\n        this.rtc = rtc;\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._propagateSendMaxFrameHeight());\n        this.rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => {\n                // Propagate the sender constraint only if it has changed.\n                if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n                    this._senderVideoConstraints = videoConstraints;\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this.conference._getActiveMediaSession()) {\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight() {\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this.conference._getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @returns {number|undefined}\n     */\n    selectSendMaxFrameHeight() {\n        const activeMediaSession = this.conference._getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : this.layerSuspensionEnabled ? this._senderVideoConstraints?.idealHeight : undefined\n            : undefined;\n\n        if (this.preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this.preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n        }\n    }\n}\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","/* global __filename, $, Promise */\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport { ReceiveVideoController } from './modules/qualitycontrol/ReceiveVideoController';\nimport { SendVideoController } from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport * as MediaType from './service/RTC/MediaType';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A coference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for tuning\n                // up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n        this.eventManager.removeXMPPListeners();\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n * @private\n */\nJitsiConference.prototype._getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n * @private\n */\nJitsiConference.prototype._getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    this.rtc.setVideoType(videoType);\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        // if there is no display name already set, avoid setting an empty one\n        if (!name && !this.room.getFromPresence(nickKey)) {\n            return;\n        }\n\n        this.room.addOrReplaceInPresence(nickKey, {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrackBelongsToConference) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n    if (newTrack.isVideoTrack()) {\n        const videoTypeTagName = 'videoType';\n\n        // if video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n        if (newTrack.videoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n            this.sendCommand(videoTypeTagName, { value: newTrack.videoType });\n        }\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (newTrack.isAudioTrack()) {\n        this.room.setAudioMute(newTrack.isMuted());\n    } else {\n        this.room.setVideoMute(newTrack.isMuted());\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addAsUnmutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage(track);\n        });\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removeAsMutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage();\n        });\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.room.myroomjid, role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getJid(), role);\n    }\n};\n\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n\n    delete this.participants[id];\n\n    // Remove the ssrcs from the remote description.\n    const mediaSessions = this._getMediaSessions();\n    const removePromises = [];\n\n    for (const session of mediaSessions) {\n        removePromises.push(session.removeRemoteStreamsOnLeave(id));\n    }\n\n    Promise.allSettled(removePromises)\n        .then(results => {\n            let removedTracks = [];\n\n            results.map(result => result.value).forEach(value => {\n                if (value) {\n                    removedTracks = removedTracks.concat(value);\n                }\n            });\n\n            removedTracks.forEach(track => {\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n            });\n\n            // There can be no participant in case the member that left is focus.\n            if (participant) {\n                this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\n            }\n\n            if (this.room !== null) { // Skip if we have left the room already.\n                this._maybeStartOrStopP2P(true /* triggered by user left event */);\n                this._maybeClearSITimeout();\n            }\n        });\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n\n    if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) || browser.isFirefox() || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(this.room, this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                    jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n                        jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                this.p2pJingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n        this._getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled() || this.isP2PTestModeEnabled() || browser.isFirefox() || browser.isWebKitBased()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this.stopP2PSession();\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Event emitted when the user granted/blocked a permission for the camera / mic.\n * Used to keep track of the granted permissions on browsers which don't\n * support the Permissions API.\n */\nexport const PERMISSIONS_CHANGED = 'rtc.permissions_changed';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n\nexport const SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia';\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(browser.isFirefox() || browser.isIosBrowser());\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","/* global\n    __filename\n*/\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","/* global __filename */\n\nimport Logger from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Configure the feature flags.\n        FeatureFlags.init({\n            sourceNameSignaling: options.sourceNameSignaling\n        });\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            JitsiMediaDevices.emitEvent(\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","constructor","userId","displayName","isLocalStats","this","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","Date","now","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","RecordingResult","require","AUDIO_WEBM","AUDIO_OGG","TrackRecorder","track","recorder","data","name","startTime","startRecorder","trackRecorder","undefined","Error","start","stopRecorder","stop","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","prototype","addTrack","isAudioTrack","instantiateTrackRecorder","push","updateNames","originalStream","getOriginalStream","stream","MediaStream","getAudioTracks","forEach","t","mimeType","ondataavailable","dataEvent","size","removeTrack","isVideoTrack","array","i","length","getParticipantId","recorderToRemove","splice","conference","isLocal","id","getParticipantById","console","log","download","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","body","appendChild","style","href","split","click","window","revokeObjectURL","getRecordingResults","getFileType","wordArray","SphinxService","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","audioRecorder","transcriptionService","counter","transcription","callback","results","state","lineLength","blobCallBack","transcriber","answer","offset","getUTCMilliseconds","wordObject","begin","end","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","bind","recordingResult","send","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","shift","updateTranscription","foundSmaller","wordToCompare","getTranscription","getState","reset","TranscriptionService","sendRequest","response","verify","formatResponse","audioBlob","Word","message","config","sphinxURL","toReturn","includes","getURL","Object","create","audioFileBlob","request","XMLHttpRequest","onreadystatechange","readyState","DONE","status","responseText","open","setRequestHeader","result","JSON","parse","objects","filler","toString","json","error","getWord","getBeginTime","getEndTime","getTokenAuthUrl","urlPattern","roomName","roleUpgrade","replace","EventEmitterForwarder","src","dest","addListener","emit","forward","args","srcEvent","Function","apply","handlers","oldOnErrorHandler","onerror","oldOnUnhandledRejection","onunhandledrejection","handler","event","reason","GlobalOnErrorHandler","addHandler","callErrorHandler","errHandler","callUnhandledRejectionHandler","randomInt","min","max","Math","floor","random","randomElement","arr","RandomUtil","randomHexDigit","randomHexString","len","ret","randomAlphanumStr","currentExecutingScript","ScriptUtil","loadScript","async","prepend","relativeURL","loadCallback","errorCallback","d","tagName","script","referenceNode","getElementsByTagName","scriptEl","scriptSrc","baseScriptSrc","substring","lastIndexOf","onload","parentNode","insertBefore","integerHash","string","char","hash","charCodeAt","pow","abs","names","generateUsername","grammar","v","reg","o","format","s","u","e","p","z","r","c","b","m","encoding","rate","address","subtype","direction","sessionConfig","str","raddr","tcptype","generation","attribute","value","maxMessageSize","params","RegExp","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","keys","key","obj","parser","writer","write","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","String","Number","parseReg","location","content","needsBlank","keyLocation","match","rawName","attachProperties","validLine","test","sdp","session","media","filter","l","slice","rtp","fmtp","j","paramReducer","acc","expr","reduce","map","candidates","parts","component","ip","port","item","scid","paused","formatRegExp","formatStr","arguments","x","arg","makeLine","n","defaultOuterOrder","defaultInnerOrder","opts","version","mLine","payloads","outerOrder","innerOrder","el","join","transform","transformUtils","parseSsrcs","writeSsrcs","getSsrcAttribute","ssrc","attributeName","ssrcs","ssrcInfo","Simulcast","options","numOfLayers","ssrcCache","processVideo","action","Array","isArray","validateDescription","desc","clearSsrcCache","setSsrcCache","_parseSimLayers","simGroup","ssrcGroups","find","group","semantics","ssrcStr","parseInt","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","ssrcMap","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","values","indexOf","_generateSourceData","primarySsrc","addAssociatedStream","primarySsrcCname","primarySsrcMsid","usesUnifiedPlan","msid","simSsrcs","simSsrc","_restoreSimulcast","numSsrcs","index","numGroups","fidGroup","mungeRemoteDescription","enableConferenceFlag","explodeRemoteSimulcast","sources","order","simulcastSsrcs","cname","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","info","nuke","implodeRemoteSimulcast","invalid","some","assertGoogConference","xGoogleFlag","removeGoogConference","RTCSessionDescription","mungeLocalDescription","source","previous_async","only_once","fn","called","noConflict","_toString","_isArray","call","_each","iterator","_map","_keys","k","hasOwnProperty","process","nextTick","setImmediate","setTimeout","each","completed","done","err","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","concat","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","reverse","foldr","_filter","sort","filterSeries","select","selectSeries","_reject","reject","rejectSeries","_detect","main_callback","detect","detectSeries","any","every","all","sortBy","criteria","left","right","auto","tasks","remainingTasks","listeners","unshift","taskComplete","theCallback","task","taskCallback","safeResults","rkey","requires","ready","listener","removeListener","retry","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","next","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","y","concatSeries","whilst","doWhilst","until","doUntil","queue","worker","concurrency","_insert","q","pos","drain","saturated","workers","empty","kill","idle","pause","resume","priorityQueue","_compareTasks","priority","sequence","compare","beg","mid","_binarySearch","cargo","payload","working","drained","ts","ds","_console_fn","dir","memoize","hasher","queues","memoized","pop","unmemoized","unmemoize","count","timesSeries","seq","fns","that","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","Uint8Array","code","num","output","defineProperty","enumerable","get","Symbol","toStringTag","__esModule","default","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","chromium","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","configurable","writable","getParser","getResult","_ua","parsedResult","getUA","parseBrowser","browser","describe","getBrowser","getBrowserName","toLowerCase","getBrowserVersion","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","assign","satisfies","isOS","isPlatform","f","isBrowser","compareVersion","substr","isEngine","is","search","versionName","vendor","model","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","Infinity","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","stack","skipStackDepth","matches","ignoreMessage","round","_nearestExecutingScript","eligibleScripts","getScriptFromUrl","hasAttribute","getSoleInlineScript","currentScript","thrownErr","near","far","origin","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","isNaN","EventEmitter","init","once","emitter","Promise","resolve","errorListener","resolver","eventTargetAgnosticAddListener","flags","on","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","TypeError","_getMaxListeners","_addListener","events","existing","warning","newListener","warned","w","warn","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","copy","addEventListener","wrapListener","removeEventListener","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","prependListener","prependOnceListener","list","position","originalListener","spliceOne","off","removeAllListeners","rawListeners","eventNames","Logger","LogCollector","logStorage","stringifyObjects","storeInterval","maxEntryLength","levels","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","stringify","someObject","formatLogMessage","msg","ERROR","timestamp","prevMessage","prevMessageText","text","_flush","_reschedulePublishInterval","clearTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","consoleTransport","globalTransports","addGlobalTransport","transport","removeGlobalTransport","transportIdx","globalOptions","getCallerInfo","callerInfo","methodName","fileLocation","line","column","logger","level","disableCallerInfo","transports","logPrefixes","toISOString","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","getLogger","setLogLevelById","setLogLevel","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","versions","node","global","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","ArrayBuffer","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","buffer","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","crypto","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","first","notString","lastByteIndex","finalize","bc","da","hex","arrayBuffer","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","add","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","func","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","Map","Set","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","input","initCloneArray","copyArray","tag","getTag","isFunc","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","newValue","getMapData","getValue","isFunction","baseIsNative","has","cache","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","cancel","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","SDPUtils","localCName","generateIdentifier","splitLines","trim","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","candidate","foundation","protocol","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","payloadType","clockRate","channels","numChannels","writeRtpMap","codec","pt","preferredPayloadType","parseExtmap","uri","writeExtmap","headerExtension","preferredId","parseFmtp","kv","writeFmtp","parameters","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","password","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","rtpmapline","fmtps","writeRtpDescription","kind","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","sctpPort","fmt","sctpMapLines","writeSctpDescription","sctp","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","charAt","global$1","_typeof","_toConsumableArray","arr2","_arrayWithoutHoles","iter","from","_iterableToArray","_nonIterableSpread","safe_add","lsw","str2binl","bin","md5_cmn","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","fromCharCode","binl2str","core_sha1","olde","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","validAttribute","validCSS","Status","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","childNodes","childNode","isTagEqual","_xmlGenerator","_makeGenerator","doc","implementation","createDocument","documentMode","_getIEXmlDom","xmlGenerator","docStrings","ActiveXObject","xmlElement","xmlTextNode","attr","setAttribute","xmlescape","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","getAttribute","cssText","cssAttrs","cssName","cssValue","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","fileName","lineNumber","debug","serialize","tree","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","ns","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","getTime","Connection","service","_this2","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","_onIdle","registerSASLMechanisms","mechanisms","F","_reset","_requests","getUniqueId","suffix","uuid","addProtocolErrorHandler","status_code","connect","pass","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","_queueData","_send","sendPresence","errback","timeout","_this3","timeoutHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","disconnect","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","condition","plugin","statusChanged","_dataRecv","req","raw","_this6","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","authMessage","attribMatch","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","overrideMimeType","_conn","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","getItem","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","sync","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","Strophe$2","$build$2","new_service","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","_streamWrap","_onMessage","CLOSED","close","closeString","rawStanza","firstChild","startString","$msg","_identities","_features","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","category","lang","addFeature","var_name","removeFeature","addItem","call_back","success","to","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","enable","_connectionStatus","getResumeToken","_resumeToken","isSupported","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","property","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","byteToHex","buf","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","encodeURIComponent","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","getRandomValues","rnds8","msCrypto","ROTL","K","H","N","ceil","M","W","T","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","dt","tl","tmh","_md","_default","hashfunc","generateUUID","namespace","stringToBytes","uuidToBytes","idx","DNS","rnds","_sha","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","RTCPeerConnection","nativeAddEventListener","nativeEventName","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","delete","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","val","compactObject","isEmptyObject","walkStats","stats","base","resultSet","endsWith","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackIdentifier","trackStat","trackId","shimGetUserMedia","browserDetails","navigator","mediaDevices","constraintsToChrome_","mandatory","optional","cc","ideal","exact","oldname_","oc","mix","advanced","shimConstraints_","constraints","audio","remap","video","face","facingMode","getSupportedFacingModeLies","getSupportedConstraints","enumerateDevices","then","devices","dev","label","deviceId","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","constraint","constraintName","getUserMedia","onError","webkitGetUserMedia","origGetUserMedia","cs","getVideoTracks","getTracks","DOMException","shimGetDisplayMedia","getSourceId","getDisplayMedia","sourceId","widthSpecified","width","heightSpecified","height","frameRateSpecified","frameRate","chromeMediaSource","chromeMediaSourceId","maxFrameRate","maxWidth","maxHeight","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","setRemoteDescription","_ontrackpoly","te","getReceivers","Event","transceiver","streams","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","pc","dtmf","_dtmf","createDTMFSender","_pc","getSenders","_senders","origAddTrack","sender","origRemoveTrack","origAddStream","addStream","origRemoveStream","removeStream","RTCRtpSender","origGetSenders","senders","shimGetStats","origGetStats","getStats","selector","onSucc","onErr","fixChromeStats_","standardReport","report","standardStats","localcandidate","remotecandidate","stat","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","RTCRtpReceiver","origGetReceivers","receivers","srcElement","MediaStreamTrack","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","streamId","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","signalingState","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","setLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","webkitRTCPeerConnection","RTCIceCandidate","fixNegotiationNeeded","getConfiguration","sdpSemantics","nativeGetUserMedia","getSettings","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","addTransceiver","setParametersPromises","initParameters","shouldPerformCheck","sendEncodings","encodingParam","parseFloat","scaleResolutionDownBy","maxFramerate","getParameters","encodings","setParameters","catch","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","createOffer","finally","shimCreateAnswer","origCreateAnswer","createAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","tracks","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","addIceCandidate","successCallback","failureCallback","promise","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","pcConstraints","iceServers","newIceServers","server","urls","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","offerToReceiveAudio","audioTransceiver","getTransceivers","setDirection","offerToReceiveVideo","videoTransceiver","shimAudioContext","AudioContext","webkitAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","sdpMid","sdpMLineIndex","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","isFirefox","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","createDataChannel","dataChannel","channel","shimConnectionState","checking","iceConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","connectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","adapter","shimChrome","shimFirefox","shimSafari","mozGetUserMedia","userAgent","isSecureContext","RTCIceGatherer","supportsUnifiedPlan","RTCRtpTransceiver","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","CAMERA","DESKTOP","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","USER","H264","OPUS","VP8","VP9","INACTIVE","RECVONLY","SENDONLY","SENDRECV","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","DOMINANT_SPEAKER_CHANGED","LASTN_ENDPOINT_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","IDENTITY_UPDATED","LOCAL_JID","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","VIDEO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_RESTARTED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","KICKED","LOCAL_ROLE_CHANGED","MEETING_ID_SET","MESSAGE_RECEIVED","INVITE_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOIN_IN_PROGRESS","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTICIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_RECEIVED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","DATA_CHANNEL_OPENED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","JVB121_STATUS","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","CALLSTATS_SCRIPT_URL","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","gum","JitsiTrackErrors","failedConstraintName","minWidth","minHeight","getResolutionFromFailedConstraint","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","CONNECTION_DISCONNECTED","ICE_DURATION","createConferenceEvent","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","JitsiMeetElectron","_detectNWJS","_detectReactNative","product","DummyLocalStorage","_storage","keyName","keyValue","jitsiLocalStorage","super","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","_detectChromiumBased","_name","_version","getName","isChrome","isOpera","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","Boolean","isTwa","matchMedia","_getChromiumBasedVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","getCapabilities","supportsDeviceChangeEvent","ondevicechange","supportsLocalCandidateRttStatistics","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsVP9","usesSdpMungingForSimulcast","usesAdapter","usesRidsForSimulcast","supportsGetDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","createEncodedStreams","ReadableStream","postMessage","supportsAudioRed","supportsVADDetection","ua","disposed","analyticsHandlers","permanentProperties","conferenceName","addPermanentProperties","dispose","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","wrtcFuncNames","reportType","_fabrics","CallStats","static","backend","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","reportsQueue","errorData","_reportError","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","usageLabel","_error","reportError","theBackend","tryCatchMethods","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","getWiFiStatsMethod","attachWifiStatsHandler","addresses","devicesData","_reportEvent","conferenceID","overall","comment","sendUserFeedback","mute","tpc","remoteUserID","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","associateStreamWithVideoTag","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","LocalStatsCollector","interval","intervalId","intervalMilis","audioLevel","safeCounterIncrement","number","nextValue","calculateAverage","valueArray","filterPositiveValues","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","setInterval","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","clearInterval","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","getEntries","duration","observer","observe","buffered","longTasksIntervalId","_lastTimeStamp","StatisticsEvents","stopObserver","AUDIO","PRESENTER","VIDEO","calculatePacketLoss","lostPackets","totalPackets","SsrcStats","loss","bitrate","upload","resolution","framerate","ConferenceStats","packetLoss","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","startAudioLevelStats","audioLevels","getAudioLevels","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","getTrackBySSRC","participantId","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","bitrateKbps","byteSentStats","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","remoteCandidateId","localUsedCandidate","localCandidateId","localip","conferenceStatsTransport","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","framesPerSecond","bytesSent","codecId","codecShortType","MediaType","remoteSource","localVideoTracks","getLocalTracks","getLocalSSRC","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","getSsrcByTrackId","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","LocalStats","addAudioLevelListener","removeAudioLevelListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","performanceObserverStats","JitsiConferenceEvents","removeLongTasksStatsListener","callStats","stopCallStats","tpcId","_stopRemoteStats","stopLocalStats","startCallStats","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","sendActiveDeviceListEvent","globalSet","sendGetUserMediaFailed","formatJitsiTrackErrorForCallStats","sendLog","globalSubSet","csPerStats","sendApplicationLog","sendFeedback","rating","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","JitsiConferenceEventManager","xmppListeners","p2pJingleSession","jvbJingleSession","isMuted","getType","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","XMPPEvents","jingleSession","rtc","closeBridgeChannel","participant","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","JitsiConferenceErrors","bridgeDown","createBridgeDownEvent","_onConferenceRestarted","_onIceConnectionFailed","createFocusLeftEvent","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","setProperty","onMemberKicked","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","_status","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","RTCEvents","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","lastDominantSpeaker","roomjid","performance","videoType","VideoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","getJid","enabled","setupStatisticsListeners","setAudioLevel","startSilent","_onByteSentStatsReceived","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","ParticipantConnectionStatus","ACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isInLastN","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","trackTimers","connStatusFromJvb","outOfLastNTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","isP2PActive","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","_onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","videoTracks","getTracksByMediaType","participantConnectionStatus","createParticipantConnectionStatusEvent","leavingLastN","enteringLastN","rTimer","JitsiParticipant","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_hidden","_statsID","_properties","_identity","_isReplacing","_isReplaced","getConference","getProperty","jitsiTrack","isWebRTCTrackMuted","oldValue","getStatsID","isHidden","isAudioMuted","_isMediaTypeMuted","getRole","setRole","newRole","setIsReplacing","newIsReplacing","setIsReplaced","newIsReplaced","supportsDTMF","getFeatures","hasFeature","feature","newFeatures","getBotType","_botType","setBotType","newBotType","WRONG_STATE","DISPLAY_NAME_REQUIRED","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","clearRejectTimeout","_timeout","setRejectTimeout","ms","Listenable","kJitsiE2EE","E2EEcontext","sharedKey","baseUrl","ljm","workerBlob","blobUrl","_worker","Worker","operation","cleanup","cleanupAll","handleReceiver","receiverStreams","readableStream","readable","writableStream","handleSender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","_getMediaSessions","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","v4","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_key","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","_onIdKeyReady","idKey","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","safeJsonParse","lastKey","isEqual","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","ManagedKeyHandler","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantJoined","initSessions","_generateKey","updateKey","material","keyBytes","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","encode","ratchet","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","_","Caps","disco","rooms","externalFeatures","emuc","_addChatRoom","_removeChatRoom","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFromPresence","children","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","_fixChatRoomPresenceMap","_notifyVersionChanged","sortedIdentities","accumulatedValue","sortedFeatures","generateSha","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","minDelay","getJitterDelay","_resumeConnection","streamManagement","resumeToken","pattern","oldToken","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawMessage","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","Events","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","isUsingWebSocket","OPEN","pingDomain","_maybeStartWSKeepAlive","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","intervalWithJitter","fetch","responseShard","timeLeft","sendUnavailableBeacon","sendBeacon","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","avModerationComponentAddress","approve","jidToWhitelist","jidToBlacklist","removed","approved","whitelists","newWhitelists","oldList","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","_leaveLobbyRoom","leave","setLobbyRoomJid","joined","email","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","nick","isHiddenDomain","botType","members","avatar","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","memberRoomJid","msgToSend","_callStatsUserName","_machineId","externalStorage","callStatsUserName","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","createExpBackoffTimer","step","Moderator","Settings","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","isExternalAuthEnabled","isSipGatewayEnabled","onMucMemberLeft","setFocusUserJid","focusJid","focusUserJid","getFocusUserJid","getFocusComponent","focusComponent","hosts","createConferenceIq","machineUID","disableRtx","audioPacketDelay","startBitrate","minBitrate","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","allocateConferenceFocus","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","errorMsg","anonymousdomain","waitMs","retrySec","errorIq","prop","getLoginUrl","urlCallback","_getLoginUrl","popup","urlCb","failureCb","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","packet2JSON","nodes","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","ChatRoom","XMPP","myroomjid","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","JitsiTranscriptionStatus","xns","statsId","deploymentInfo","userRegion","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","onPresence","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","isReplaceParticipant","affiliation","isFocus","hiddenDomain","fromHiddenDomain","presence","xEl","remove","extractIdentityInformation","userInfo","groupInfo","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","sendPrivateMessage","setSubject","subject","onParticipantLeft","skipEvents","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","onPresenceError","lobbyRoomNode","setAffiliation","grantIQ","kickIQ","lockRoom","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","getMemberRole","peerJid","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","audioMutedTagName","addVideoInfoToPresence","videoMutedTagName","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","isSIPCallingSupported","dial","rayo","hangup","getLobby","getAVModeration","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","MucConnectionPlugin","isRoomCreated","_sourceNameSignaling","sourceNameSignaling","isSourceNameSignalingEnabled","obtainStream","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamType","screenShareAudio","audioConstraints","optionalConstraints","minFrameRate","screen","sourceType","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","findLine","parseICEUfrag","parseICEPwd","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","buildMLine","parseRTPMap","clockrate","parseSCTPMap","buildRTPMap","parseCrypto","fingerprint","parseICECandidate","elems","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseRTCPFB","haystack","needle","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","generateSsrc","ssrcLine","parseGroupSsrcs","ssrcGroup","getMedia","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","payloadTypes","payloadIndex","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","rtxApts","rtxPts","keepPts","MediaDirection","rtcpFb","SDP","mediaI","arrayEquals","array1","array2","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","availableSsrc","ssrcParameters","sourceName","FeatureFlags","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","transportToJingle","sctpmap","sctpAttrs","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fromJingle","jingle","groups","contents","jingle2media","streamCount","__","hdrExt","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","AsyncQueue","_queue","_processQueueTasks","_stopped","finishedCallback","shutdown","PENDING","ENDED","JingleSession","localJid","mediaConstraints","isInitiator","usedrip","dripContainer","initiatorJid","responderJid","JingleSessionState","doInitialize","addIceCandidates","addSources","removeSources","terminate","failure","acceptOffer","_getInitiatorJid","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SignalingLayer","getSSRCOwner","getPeerMediaInfo","owner","SignalingLayerImpl","ssrcOwners","setChatRoom","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","SignalingEvents","setSSRCOwner","IQ_TIMEOUT","JingleSessionPC","jingleContents","videoContents","maxFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","signalingLayer","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","enableInsertableStreams","videoQuality","forceTurnRelay","enableUnifiedOnChrome","disableSimulcast","abtestSuspendVideo","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","createPeerConnection","onicecandidate","ev","phase","initiator","sendIceCandidate","onsignalingstatechange","oniceconnectionstatechange","isStable","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","configureSenderVideoEncodings","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","localSDP","ice","jcand","errorMesssage","sendIceCandidates","cands","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","iceCandidate","outerHTML","readSsrcInfo","ssrcElement","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","addTracks","localTrack","offerSdp","sendSessionInitiate","setAnswer","jingleAnswer","remoteSdp","_responderRenegotiate","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","disabled","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","accept","responder","maxFrameHeight","sessionModify","setReceiverVideoConstraint","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","videoActive","setMediaTransferActive","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","remoteTracks","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","removeRemoteTracks","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","offer","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","audioActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","MediaSessionEvents","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","abTesting","enableSuspendVideoTest","_createSourceExtension","sourceCompactJson","_createSsrcGroupExtension","ssrcGroupCompactJson","_expandSourcesFromJson","jsonMessageXml","audioRtpDescription","_getOrCreateRtpDescription","videoRtpDescription","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v2Err","v1Res","v1Err","iceservers","dict","credential","temp","useTurnUdp","getLog","updateLog","StropheLogger","logIncoming","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","token","disconnectInProgress","authenticatedUser","trace","errStatusCapture","createConnection","bosh","details","shard_changed","suspend_time","time_since_last_success","JitsiConnectionEvents","JitsiConnectionErrors","_initStrophePlugins","initFeaturesList","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_sysMessageHandler","sendDiscoInfo","_resetState","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","region","_onPrivateMessage","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","p2pStunServers","stunServers","iceTransportPolicy","headersArr","jsonString","users","created_timestamp","authenticateAndUpgradeRole","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","CodecSelection","disabledCodec","_getCodecMimeType","jvbCodec","p2pCodec","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","_onMediaSessionStared","mediaSession","currentCodec","selectedCodec","enforcePreferredCodec","remoteParticipants","remote","peerMediaInfo","peerCodec","getPreferredCodec","BridgeChannel","wsUrl","_channel","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","mode","sendEndpointStatsMessage","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendSelectedEndpointsMessage","endpointIds","selectedEndpoints","sendReceiverVideoConstraintMessage","maxFrameHeightPixels","sendNewReceiverVideoConstraintsMessage","sendVideoTypeMessage","dominantSpeakerEndpoint","previousSpeakers","active","lastNEndpoints","videoConstraints","jsonObject","DEFAULT_CONSTRAINTS","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","videoTracksReceived","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","RTCPeerConnectionType","attachMediaStream","getStreamID","getTrackID","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","googScreencastMinBitrate","googCpuOveruseDetection","screenObtainer","isDeviceListAvailable","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","Resolutions","cameraDeviceId","CameraFacingMode","micDeviceId","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","avStream","audioTracks","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","googSuspendBelowMinBitrate","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","videoTrack","getVideoType","isLocalAudioTrack","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","RTCUtils","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","getMSID","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","storedMSID","_streamEffect","_originalStream","startEffect","_stopStreamEffect","stopEffect","_switchStreamEffect","setEffect","cont","_queueSetMuted","unmute","setMuted","_setMuted","logMuteInfo","_removeStreamFromConferenceAsMute","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","_removeLocalTrackAsMute","_setConference","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","sessionMedia","bLine","bundle","mids","msidSemantic","semantic","resStr","toUnifiedPlan","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","resultSdp","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLine","toRawSDP","LocalSdpMunger","localEndpointId","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","streamAndTrackIDs","mediaDirection","generatedMsid","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","firstLetterOfMediaType","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","setMute","getSSRC","_setVideoType","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","videoBitrates","encodingBitrates","localStreamEncodingsConfig","_findTransceiver","_getStreamEncodings","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","calculateEncodingsActiveState","localVideoTrack","newHeight","isSharingLowFpsScreen","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","presenterEnabled","localSSRCs","_addedStreams","setEncodings","transceivers","updateEncodingsResolution","TraceablePeerConnection","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","tpcUtils","statsinterval","_capScreenshareBitrate","_usesUnifiedPlan","_usesTransceiverCodecPreferences","interop","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","what","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","statValue","endTime","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","_getReceiversByEndpointIds","endpoints","getRemoteTracks","remoteTrackIds","getSynchronizationSources","getLocalVideoTrack","endpointTrackMap","mediaTrack","primarySsrcs","fidLines","getTargetVideoBitrates","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","existingTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedTracks","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","_extractSSRCMap","groupsMap","groupSSRCs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","_isSharingScreen","_mungeCodecOrder","codecPreference","bitrates","hdBitrate","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","defaultCodec","lowFps","findSenderByKind","_ensureSimulcastGroupIsLast","localSdp","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","currentDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","normalizePlanB","videoSender","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","layer","sendTones","tones","interToneGap","rtpSender","localAudioTrack","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIdentifier","newSSRCNum","oldSSRCNum","activeStreams","currNumSsrcs","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_lastNEndpoints","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","setNewReceiverVideoConstraints","setVideoType","selectEndpoints","ids","signaling","encodedInsertableStreams","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","targetRN","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_audioLevel","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","DetectionEvents","_handleNoAudioInputDetection","_eventFired","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","clearIntervals","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","createE2eRttEvent","E2ePing","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","getParticipantCount","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","ReceiveVideoController","_rtc","startLastN","channelLastN","useNewBandwidthAllocationStrategy","remoteEndpointIds","oldConstraints","newConstraints","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","p2pSession","SendVideoController","layerSuspensionEnabled","enableLayerSuspension","_propagateSendMaxFrameHeight","_senderVideoConstraints","idealHeight","_getActiveMediaSession","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","ComponentsVersions","addCommandListener","processVersions","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","startRecording","_addSession","_emitSessionUpdate","stopRecording","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","JitsiConnection","appID","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","resourceCreator","isAuthenticatedUser","codecSettings","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","receiveVideoController","sendVideoController","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","_sendBridgeVideoTypeMessage","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","command","removeCommandListener","sendTextMessage","sendPrivateTextMessage","sendCommand","sendCommandOnce","removeCommand","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","_fireAudioLevelChangeEvent","activeTpc","_fireMuteChangeEvent","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldTrackBelongsToConference","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","videoTypeTagName","addAsUnmutePromises","removeAsMutePromises","lock","unlock","selectParticipant","selectParticipants","isInteger","isVideoActive","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","removePromises","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_suspendMediaTransferForJvbConnection","webSocket","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","setToken","initJitsiConference","getLogs","metadata","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","JitsiMediaDevicesEvents","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","getAnalyticsAttributesFromOptions","video_requested","JitsiMeetJS","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","_selfCloseConnection","xml","xmlDom","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","constants","recording","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","sipVideoGW","detection","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","AuthUtil","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","g","globalThis","nmd","paths","__webpack_exports__"],"sourceRoot":""}